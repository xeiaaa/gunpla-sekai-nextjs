# Task ID: 28
# Title: Implement UI/UX for Likes, Comments, and Sharing on Builds
# Status: pending
# Dependencies: 26, 27
# Priority: medium
# Description: Add social engagement features including likes, comments, and sharing functionality to build pages with comprehensive UI/UX design
# Details:
üîπ 1. Likes (Lightweight Social Feedback)

Purpose: Quick, low-effort way for users to show appreciation.

UI/UX
	‚Ä¢	Icon: Heart ‚ù§Ô∏è (outline ‚Üí filled when liked).
	‚Ä¢	Placement: Top-right of build card or near build title.
	‚Ä¢	Count: Display total likes next to the heart (132).
	‚Ä¢	Interaction:
	‚Ä¢	Tap once ‚Üí toggles "like".
	‚Ä¢	Animations: small "pop" when liking for feedback.
	‚Ä¢	Anonymous view: Show count but require login to like.
	‚Ä¢	Hover/tooltip: "Like this build".

Example:
‚ù§Ô∏è 24 likes

‚∏ª

üîπ 2. Comments (Community Engagement)

Purpose: Encourage discussion, feedback, and connection.

UI/UX
	‚Ä¢	Placement: Below build milestones or in a tab ("Comments").
	‚Ä¢	Structure:
	‚Ä¢	Input box:
	‚Ä¢	Placeholder: "Add a comment‚Ä¶"
	‚Ä¢	Support markdown or just plain text.
	‚Ä¢	Comment list:
	‚Ä¢	Avatar + username
	‚Ä¢	Timestamp (e.g. 2h ago)
	‚Ä¢	Text content
	‚Ä¢	(Optional) "Reply" ‚Üí threaded comments, but you could keep it flat for MVP.
	‚Ä¢	Moderation tools: User can delete their own comments. Admins can remove any.
	‚Ä¢	Sorting:
	‚Ä¢	Default: newest first.
	‚Ä¢	(Optional later): most liked ‚Üí top.
	‚Ä¢	Empty state: "No comments yet. Be the first to comment!"

‚∏ª

üîπ 3. Sharing (No DB needed)

Purpose: Let users promote builds externally.

UI/UX
	‚Ä¢	Button: "Share" (icon: üîó or arrow).
	‚Ä¢	Placement: Top-right corner near "Like".
	‚Ä¢	Click ‚Üí Options:
	‚Ä¢	Copy link ‚Üí auto-copies /builds/[id] to clipboard with toast "Link copied!"
	‚Ä¢	Social buttons (small icons, optional):
	‚Ä¢	Twitter/X
	‚Ä¢	Facebook
	‚Ä¢	Reddit
	‚Ä¢	Discord (just copy-paste)
	‚Ä¢	No DB needed since sharing is just link-based.

Example interaction:
User clicks Share ‚Üí Copy Link ‚Üí small toast in bottom corner:
‚úÖ "Build link copied to clipboard!"

‚∏ª

üîπ Suggested Layout (per Build Page)

```
[ Title + Author + Dates ]

[ Like ‚ù§Ô∏è 24 ]   [ Comment üí¨ 5 ]   [ Share üîó ]
------------------------------------------------
| Build Milestones / Gallery / Info Tabs       |
------------------------------------------------
Comments Section (if tab active):
- Input box
- Comment list
```

‚ú® This way:
	‚Ä¢	Likes = quick & social.
	‚Ä¢	Comments = deeper engagement.
	‚Ä¢	Sharing = viral growth, no backend complexity.

# Test Strategy:
UI interaction tests for likes/comments/sharing, social engagement functionality tests, comment moderation tests, sharing link validation tests

# Subtasks:
## 1. Update Database Schema for Likes and Comments [done]
### Dependencies: None
### Description: Add database models and relationships for build likes and comments functionality
### Details:
Create new Prisma models for BuildLike and BuildComment:

**BuildLike Model:**
- id: String @id @default(cuid())
- buildId: String
- userId: String
- createdAt: DateTime @default(now())
- build: Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
- user: User @relation(fields: [userId], references: [id], onDelete: Cascade)
- @@unique([buildId, userId]) // Prevent duplicate likes

**BuildComment Model:**
- id: String @id @default(cuid())
- buildId: String
- userId: String
- content: String
- createdAt: DateTime @default(now())
- updatedAt: DateTime @updatedAt
- build: Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
- user: User @relation(fields: [userId], references: [id], onDelete: Cascade)

**Update Build Model:**
- Add likes: BuildLike[] relation
- Add comments: BuildComment[] relation

**Update User Model:**
- Add buildLikes: BuildLike[] relation
- Add buildComments: BuildComment[] relation

Run migration and update Prisma client.

## 2. Implement Like System UI/UX [done]
### Dependencies: 28.1
### Description: Create heart icon component with toggle functionality, count display, and animations
### Details:
**LikeButton Component:**
- Heart icon (outline ‚Üí filled when liked)
- Like count display
- Toggle functionality (like/unlike)
- Small "pop" animation on like
- Hover tooltip: "Like this build"
- Login requirement for anonymous users
- Optimistic updates for better UX

**Placement:**
- Top-right of build card or near build title
- Consistent positioning across all build views

**API Actions:**
- toggleBuildLike(buildId: string)
- getBuildLikes(buildId: string)
- getUserLikedBuilds(userId: string)

**State Management:**
- Track like status per build
- Handle loading states
- Error handling for failed requests

## 3. Implement Comments System UI/UX [pending]
### Dependencies: 28.1
### Description: Create comment input, display list, and moderation features
### Details:
**CommentInput Component:**
- Textarea with placeholder: "Add a comment‚Ä¶"
- Markdown support or plain text
- Submit button with loading state
- Character limit validation
- Auto-resize textarea

**CommentList Component:**
- Display comments with avatar + username
- Timestamp (e.g. "2h ago")
- Comment content with markdown rendering
- Delete button for own comments
- Admin moderation tools
- Empty state: "No comments yet. Be the first to comment!"

**CommentItem Component:**
- User avatar and username
- Comment timestamp
- Comment content
- Delete/edit actions (if owner)
- Reply functionality (optional for MVP)

**Placement:**
- Below build milestones or in "Comments" tab
- Sort by newest first (default)

**API Actions:**
- createBuildComment(buildId: string, content: string)
- getBuildComments(buildId: string)
- deleteBuildComment(commentId: string)
- updateBuildComment(commentId: string, content: string)

## 4. Implement Sharing System [pending]
### Dependencies: None
### Description: Create share button with copy link and social media options
### Details:
**ShareButton Component:**
- Share icon (üîó or arrow)
- Click opens share options modal/dropdown
- Copy link functionality
- Social media buttons (Twitter/X, Facebook, Reddit, Discord)
- Toast notification: "Link copied to clipboard!"

**ShareOptions Component:**
- Copy link button (primary action)
- Social media share buttons (small icons)
- Build URL: /builds/[id]
- Open Graph meta tags for social sharing

**Placement:**
- Top-right corner near Like button
- Consistent across all build views

**Features:**
- No database needed (link-based sharing)
- Clipboard API integration
- Social media URL generation
- Responsive design for mobile

**API Actions:**
- generateShareUrl(buildId: string)
- getBuildShareData(buildId: string) // For Open Graph

## 5. Integrate Social Features into Build Pages [pending]
### Dependencies: 28.2, 28.3, 28.4
### Description: Add social engagement components to build detail and edit pages
### Details:
**Build Detail Page Integration:**
- Add Like, Comment, Share buttons to build header
- Implement suggested layout:
  ```
  [ Title + Author + Dates ]
  [ Like ‚ù§Ô∏è 24 ] [ Comment üí¨ 5 ] [ Share üîó ]
  ```
- Add Comments tab to existing tab navigation
- Integrate with existing build milestone system

**Build Edit Page Integration:**
- Add social engagement preview
- Show like/comment counts in edit mode
- Maintain existing tab structure

**Build Card Integration:**
- Add like count to build cards in listings
- Consistent social engagement display
- Hover states and interactions

**Responsive Design:**
- Mobile-friendly button layout
- Touch-friendly interaction areas
- Proper spacing and alignment

**State Management:**
- Real-time updates for likes/comments
- Optimistic UI updates
- Error handling and retry logic

## 6. Add Polish, Animations, and Testing [pending]
### Dependencies: 28.5
### Description: Implement smooth animations, loading states, and comprehensive testing
### Details:
**Animations and Polish:**
- Heart "pop" animation on like
- Smooth transitions for comment loading
- Loading skeletons for social engagement
- Hover effects and micro-interactions
- Toast notifications with smooth animations
- Error state handling with retry options

**Performance Optimizations:**
- Lazy loading for comment lists
- Debounced like/unlike actions
- Optimistic updates for better perceived performance
- Caching for like/comment counts

**Testing:**
- Unit tests for LikeButton, CommentInput, CommentList components
- Integration tests for social engagement flow
- E2E tests for complete user journey
- Accessibility tests (keyboard navigation, screen readers)
- Performance tests for large comment lists
- Mobile responsiveness tests

**Error Handling:**
- Network error recovery
- Rate limiting handling
- User permission validation
- Graceful degradation for failed features

**Documentation:**
- Component usage examples
- API documentation updates
- User interaction guidelines

