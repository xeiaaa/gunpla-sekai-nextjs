{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Complete Database Schema Implementation",
        "description": "Finalize and optimize the Prisma database schema for all core entities including kits, users, reviews, and relationships",
        "details": "The database schema is the foundation of the entire platform. Need to ensure all relationships are properly defined, indexes are optimized, and the schema supports all planned features from the PRD.",
        "priority": "high",
        "status": "done",
        "dependencies": [],
        "testStrategy": "Unit tests for all Prisma models, integration tests for complex relationships, performance tests for queries",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up testing framework and environment",
            "description": "Configure Jest, Prisma test database, and testing utilities for database testing",
            "details": "Install and configure Jest with TypeScript support, set up separate test database, configure Prisma test client, and create test utilities for database operations.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Create comprehensive unit tests for all Prisma models",
            "description": "Write comprehensive unit tests covering CRUD operations, constraints, enums, defaults, and business logic for all models",
            "details": "**Model-Level CRUD Tests**: For each model, verify basic create, read, update, delete operations work. Examples: Timeline (create, fetch by slug, update description, delete), Kit (create with grade/series/release type, verify relations), User (create with Clerk ID, ensure uniqueness constraints on email/username). **Constraint Tests**: Check @unique, @@unique, and @@index constraints. Examples: Two Kits cannot have same slug, Two Users cannot have same email/username, Compound unique constraints like KitMobileSuit (kitId, mobileSuitId), ReviewScore (reviewId, category), Business logic constraints like Review (one per user per kit), UserKitCollection (one per user-kit pair). **Enum Validation Tests**: Verify only valid enum values allowed for CollectionStatus (WISHLIST|BACKLOG|BUILT), BuildStatus (PLANNING|IN_PROGRESS|COMPLETED|ON_HOLD), ReviewCategory, MilestoneType, etc. Test that inserting invalid enum values throws errors. **Default Values & Auto Fields**: Ensure defaults and auto-calculated fields work correctly - createdAt auto sets to now(), updatedAt updates on every update, arrays default to [] (scrapedImages, manualLinks), MarketplaceListing currency defaults to \"JPY\". Test all models: User, UserKitCollection, Review, ReviewScore, Build, BuildMilestone, BuildComment, UserStore, MarketplaceListing, Kit, Upload, Timeline, Series, Grade, ProductLine, MobileSuit, ReleaseType, and all junction tables.",
            "status": "done",
            "dependencies": [
              "[\"1.1\"]"
            ],
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Create comprehensive integration tests for relationships and constraints",
            "description": "Test complex multi-model relationships, foreign key constraints, cascade behaviors, and junction table integrity",
            "details": "**Relation Integrity Tests**: Prisma enforces referential integrity via @relation. Test that creating a Series with a valid timelineId works, but with an invalid one throws an error. **Cascade/SetNull Behavior Tests**: Prisma lets you configure onDelete. Test these explicitly: Series → Timeline (onDelete: SetNull) - deleting a Timeline should not delete its Series, just null the timelineId; Grade → ProductLine (onDelete: Cascade) - deleting a Grade should delete all its ProductLines; Kit → BaseKit (onDelete: SetNull) - deleting a base kit should not delete variants, just nullify baseKitId. **Junction Table Behavior Tests**: Your schema has multiple M:N junctions: KitMobileSuit, KitUpload, MobileSuitUpload. Test that creating associations works, duplicate association should fail (@@unique), deleting one side of the relation deletes the join row (onDelete: Cascade). **Complex Relationship Chains**: Test User->UserKitCollection->Kit relationships, Review->ReviewScore aggregations, Build->BuildMilestone->BuildComment chains, UserStore->MarketplaceListing connections, and Upload->User references. Verify cascade deletes, constraint violations, and relationship integrity.",
            "status": "done",
            "dependencies": [
              "[\"1.2\"]"
            ],
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Create comprehensive performance tests and query optimization",
            "description": "Test query performance with indexes, large datasets, complex filtering operations, and constraint validation performance",
            "details": "**Query Performance Tests**: Create performance benchmarks for common queries like kit searches with filters, user collection lookups, review aggregations, and build listings. Test with sample datasets of varying sizes (100, 1000, 10000+ records). **Index Effectiveness Tests**: Verify that indexes are being used effectively for all @unique, @@unique, and @@index constraints. Test query performance on Kit.slug, User.email, User.username, compound indexes like KitMobileSuit (kitId, mobileSuitId), ReviewScore (reviewId, category). **Constraint Performance Tests**: Test that unique constraint validation performs well with large datasets. Verify that foreign key constraint checks don't cause performance bottlenecks. **Complex Relationship Query Performance**: Test performance of queries involving multiple joins (User->UserKitCollection->Kit->Series->Timeline), aggregation queries (Review->ReviewScore averages), and cascade operations. **Optimization Identification**: Identify any slow queries that need optimization and document recommended index additions or query restructuring.",
            "status": "done",
            "dependencies": [
              "[\"1.3\"]"
            ],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Authentication System with Clerk",
        "description": "Set up Clerk authentication integration with user profiles, session management, and webhook synchronization",
        "details": "Implement complete user authentication flow including sign-up, sign-in, profile management, and session handling. Integrate Clerk webhooks (user.created, user.updated, user.deleted) to keep the Prisma User table in sync with Clerk's user records. This ensures your app database always reflects Clerk's authentication state. Handle user.created, user.updated, and user.deleted events to keep our database synchronized with Clerk user data including clerkId, email, username, profileImageUrl, firstName, lastName, etc. Include proper error handling and logging for webhook failures.",
        "priority": "high",
        "status": "done",
        "dependencies": [
          "1"
        ],
        "testStrategy": "Authentication flow tests (sign-up, sign-in, sign-out), session management tests, user profile CRUD tests (via Prisma + Clerk sync), webhook event tests (user created, updated, deleted → Prisma updated accordingly)"
      },
      {
        "id": 3,
        "title": "Build Core Kit Listing and Display Components",
        "description": "Create responsive kit listing pages with basic filtering and complete kit detail pages",
        "details": "Build the fundamental UI components for displaying kits including list views, card components, and detail pages. This validates the core data model and establishes UI patterns. \n\nKit Detail Pages:\n- Show full kit information (number, grade, product line, release type, price, box art, notes).\n- Display mobile suits related to the kit (with image and series).\n- Show Base Kit if baseKitId is present.\n- Show Variants if the kit is a baseKit for other kits.\n- Show Other Variants if a kit has a baseKitId (find sibling kits with the same baseKitId).\n\nNavigation Pages:\n- /timelines → show all timelines.\n- /timelines/[slug] → show timeline details and all series under it.\n- /series/[slug] → show series details and all mobile suits under it.\n- /mobile-suits/[slug] → show the related kits.\n- /grades → show all grades.\n- /grades/[slug] → show grade details and all product lines related to it.\n- /product-lines/[slug] → show product line details.\n- /release-type/[slug] → show release type details and analytics of kits (e.g. 8 kits released: 5 MG, 3 HG).",
        "priority": "high",
        "status": "done",
        "dependencies": [
          "1"
        ],
        "testStrategy": "Component tests for all UI elements, responsive design tests, accessibility tests, relationship rendering tests (base kit/variants/other variants), navigation and routing tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Enhance Kit Cards",
            "description": "Enhance existing kit cards with grade/product line badges, release date, price, wishlist button, hover states",
            "details": "Improve the existing kit cards in the listing page to show more information and better visual design. Add grade and product line badges, display release date and price, add wishlist functionality, and implement hover states for better user interaction.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Build Kit Detail Pages",
            "description": "Create comprehensive kit detail pages showing full kit info, related mobile suits, base kit relationships, variants, other variants, and related uploads",
            "details": "Build individual kit detail pages that serve as the central hub for all kit-related information. Display complete kit metadata, show relationships to mobile suits with images and series info, display base kit relationships, show variants and other variants, and include related uploads like box art, manuals, runners, prototypes, and product shots.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Create Universe/Hierarchy Browse Pages",
            "description": "Create timeline, series, and mobile suit browsing pages (/timelines, /timelines/[slug], /series/[slug], /mobile-suits/[slug])",
            "details": "Build the hierarchical browsing system that allows users to explore kits through the universe structure. Create timeline listing page, individual timeline pages showing all series, series pages showing all mobile suits, and mobile suit pages showing all related kits. This provides intuitive navigation through the Gundam universe hierarchy.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Create Grade/Product Line/Release Type Browse Pages",
            "description": "Create grade, product line, and release type browsing pages (/grades, /grades/[slug], /product-lines/[slug], /release-type/[slug])",
            "details": "Build browsing pages for different kit categorization systems. Create grade listing page, individual grade pages showing related product lines, product line pages showing related kits, and release type pages with analytics (e.g., \"8 kits released: 5 MG, 3 HG\"). This provides alternative ways to discover kits beyond the universe hierarchy.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Add Navigation Between Related Kits",
            "description": "Add related kits sections, navigation buttons, and cross-linking between related kits",
            "details": "Implement navigation features that help users discover related kits. Add \"Related Kits\" sections in detail pages, implement navigation buttons (e.g., \"Next Kit / Previous Kit\" in listings), and create cross-linking from mobile suit pages to related kits. This improves user experience by making it easy to explore related content.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Implement Comprehensive Testing",
            "description": "Component tests, responsive design tests, relationship rendering tests, and routing tests for all new pages",
            "details": "Create comprehensive test coverage for all the new kit browsing components and pages. Include component tests for kit cards, detail pages, and navigation components. Add responsive design tests for mobile, tablet, and desktop views. Implement relationship rendering tests for base kit, variants, and other variants functionality. Create routing tests for all new pages to ensure proper navigation and data loading.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Meilisearch Integration",
        "description": "Set up Meilisearch for full-text search with kit indexing and search API",
        "details": "Configure Meilisearch server, implement indexing pipeline for kit data, create search API endpoints with filtering capabilities.",
        "priority": "high",
        "status": "deferred",
        "dependencies": [
          "1"
        ],
        "testStrategy": "Search functionality tests, indexing performance tests, search result accuracy tests"
      },
      {
        "id": 5,
        "title": "Create Advanced Filtering System",
        "description": "Build multi-select and range filters for grade, product line, series, timeline, and review scores",
        "details": "Implement sophisticated filtering UI with collapsible sidebar, multi-select options, range sliders, and integration with search functionality.",
        "priority": "medium",
        "status": "done",
        "dependencies": [
          "3"
        ],
        "testStrategy": "Filter functionality tests, UI interaction tests, performance tests with large datasets"
      },
      {
        "id": 6,
        "title": "Implement User Collection Management System",
        "description": "Build wishlist, backlog, built, and starred collection categories with status transitions",
        "details": "Create the core collection management system allowing users to organize kits across four categories with seamless status transitions.",
        "priority": "high",
        "status": "done",
        "dependencies": [
          "2",
          "3"
        ],
        "testStrategy": "Collection CRUD tests, status transition tests, user permission tests",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Build User Profile Pages",
        "description": "Create public user profiles displaying collections, activity, and statistics",
        "details": "Design and implement user profile pages showing collection statistics, recent activity, and public build galleries.",
        "priority": "medium",
        "status": "done",
        "dependencies": [
          "6"
        ],
        "testStrategy": "Profile display tests, privacy setting tests, performance tests for large collections",
        "subtasks": [
          {
            "id": 2,
            "title": "Create Profile Edit Page",
            "description": "Build /settings/profile route for users to edit their profile details and privacy settings",
            "details": "- Route: /settings/profile (or /profile/edit)\n- Change avatar functionality\n- Edit bio, location, preferences\n- Privacy settings (make profile public/private)\n- Form validation and error handling",
            "status": "done",
            "dependencies": [
              "7.1"
            ],
            "parentTaskId": 7
          },
          {
            "id": 1,
            "title": "Create Public Profile Page",
            "description": "Build /users/[username] route with user info, collection stats, public builds gallery, and reviews",
            "details": "- Route: /users/[username]\n- Display user info (avatar, username, bio, join date)\n- Show collection stats (wishlist, backlog, built counts)\n- Public builds gallery (latest 3-5 builds)\n- Reviews given by this user\n- Read-only presentation of collection data",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "Create User Builds Page",
            "description": "Build /users/[username]/builds route for dedicated build gallery browsing",
            "details": "- Route: /users/[username]/builds\n- Dedicated page to browse all user builds (like a gallery)\n- Public profile might only show latest 3-5 builds; this page shows all\n- Build filtering and sorting options\n- Pagination for large build collections",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 4,
            "title": "Create User Reviews Page",
            "description": "Build /users/[username]/reviews route to show all reviews written by the user",
            "details": "- Route: /users/[username]/reviews\n- Show all reviews written by that user\n- Review history and statistics\n- Review filtering and sorting\n- Link back to reviewed kits",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Image Upload and Management",
        "description": "Set up Cloudinary integration for user-generated content with optimization",
        "details": "Configure Cloudinary for image storage, implement upload components, set up image optimization and transformation pipelines.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "2"
        ],
        "testStrategy": "Upload functionality tests, image optimization tests, storage quota tests"
      },
      {
        "id": 9,
        "title": "Create Basic Build Documentation System",
        "description": "Implement simple build entries without milestone system as foundation for Phase 4",
        "details": "Build basic build creation and display functionality that can be extended with milestones later.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "6",
          "8"
        ],
        "testStrategy": "Build creation tests, image association tests, build display tests"
      },
      {
        "id": 10,
        "title": "Design and Implement 6-Category Review System",
        "description": "Build structured review system with validation, scoring, and gated access",
        "details": "Implement the comprehensive 6-category review system with proper validation, aggregate scoring, and access controls.",
        "priority": "high",
        "status": "done",
        "dependencies": [
          "6"
        ],
        "testStrategy": "Review validation tests, scoring calculation tests, access control tests"
      },
      {
        "id": 11,
        "title": "Build Review Aggregation and Display",
        "description": "Calculate and display average review scores with visualization components",
        "details": "Create systems for aggregating review scores, displaying averages, and visualizing review data with charts/graphs.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "10"
        ],
        "testStrategy": "Aggregation calculation tests, visualization component tests, performance tests"
      },
      {
        "id": 12,
        "title": "Implement Advanced Search with Review Filtering",
        "description": "Extend search functionality to filter by review scores and criteria",
        "details": "Enhance the search system to support filtering by review scores and specific review criteria.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "5",
          "11"
        ],
        "testStrategy": "Advanced search tests, filter combination tests, search performance tests"
      },
      {
        "id": 13,
        "title": "Create Review Moderation System",
        "description": "Build basic reporting and moderation tools for review quality control",
        "details": "Implement review reporting functionality, moderation interface, and automated quality checks.",
        "priority": "low",
        "status": "pending",
        "dependencies": [
          "10"
        ],
        "testStrategy": "Moderation workflow tests, reporting functionality tests, automated detection tests"
      },
      {
        "id": 14,
        "title": "Implement Milestone-Based Build Documentation",
        "description": "Extend build system with step-by-step progress tracking and milestones",
        "details": "Add milestone functionality to build documentation allowing detailed progress tracking through build phases.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "9"
        ],
        "testStrategy": "Milestone creation tests, progress tracking tests, milestone ordering tests"
      },
      {
        "id": 15,
        "title": "Build Rich Media Build Galleries",
        "description": "Create comprehensive build presentation with multiple images and captions",
        "details": "Implement rich media galleries for completed builds with multiple images, captions, and organized presentation.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "14"
        ],
        "testStrategy": "Gallery display tests, image organization tests, caption functionality tests"
      },
      {
        "id": 16,
        "title": "Implement Build Comments and Community Engagement",
        "description": "Add comment system and community feedback features for builds",
        "details": "Create commenting system for builds, community engagement features, and social interaction tools.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "15"
        ],
        "testStrategy": "Comment functionality tests, moderation tests, engagement tracking tests"
      },
      {
        "id": 17,
        "title": "Create Social Sharing Integration",
        "description": "Implement Open Graph tags and external platform sharing for builds",
        "details": "Add social media sharing capabilities with proper Open Graph meta tags and shareable build pages.",
        "priority": "low",
        "status": "pending",
        "dependencies": [
          "15"
        ],
        "testStrategy": "Social sharing tests, Open Graph validation tests, external link tests"
      },
      {
        "id": 18,
        "title": "Build User Store System",
        "description": "Create one store per user with custom branding and inventory management",
        "details": "Implement user store creation, branding customization, and basic inventory management functionality.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "7"
        ],
        "testStrategy": "Store creation tests, inventory management tests, branding customization tests"
      },
      {
        "id": 19,
        "title": "Implement Marketplace Listing System",
        "description": "Build listing creation with kit selection, descriptions, and pricing",
        "details": "Create marketplace listing functionality allowing users to list kits from the database with custom descriptions and pricing.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "18"
        ],
        "testStrategy": "Listing creation tests, kit association tests, pricing validation tests"
      },
      {
        "id": 20,
        "title": "Create Buyer-Seller Communication System",
        "description": "Implement in-platform messaging between buyers and sellers",
        "details": "Build messaging system for buyer-seller communication with proper privacy and safety features.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "19"
        ],
        "testStrategy": "Messaging functionality tests, privacy tests, safety feature tests"
      },
      {
        "id": 21,
        "title": "Implement Timeline and Series Browsing Structure",
        "description": "Create hierarchical browsing through Timeline → Series → Mobile Suits → Kits",
        "details": "Build the universe browsing structure allowing users to navigate through timelines, series, and mobile suits to find kits.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "3"
        ],
        "testStrategy": "Navigation structure tests, hierarchy display tests, relationship navigation tests"
      },
      {
        "id": 22,
        "title": "Build Kit Relationship Mapping System",
        "description": "Implement base kit, variant, and sibling kit relationship display",
        "details": "Create UI components and logic for displaying kit relationships including base kits, variants, and related mobile suits.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "21"
        ],
        "testStrategy": "Relationship display tests, navigation between related kits tests, relationship accuracy tests"
      },
      {
        "id": 23,
        "title": "Implement Performance Optimization",
        "description": "Optimize database queries, implement caching, and ensure mobile performance",
        "details": "Implement performance optimizations including query optimization, caching strategies, image optimization, and mobile performance improvements.",
        "priority": "high",
        "status": "pending",
        "dependencies": [
          "12"
        ],
        "testStrategy": "Performance benchmarks, load testing, mobile performance tests, caching effectiveness tests"
      },
      {
        "id": 24,
        "title": "Build SEO and Accessibility Features",
        "description": "Implement SEO optimization, structured data, and accessibility compliance",
        "details": "Add SEO features including meta tags, structured data, sitemaps, and ensure WCAG 2.1 AA accessibility compliance.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          "3"
        ],
        "testStrategy": "SEO validation tests, accessibility compliance tests, structured data validation"
      },
      {
        "id": 25,
        "title": "Implement Advanced Analytics and Recommendations",
        "description": "Build analytics dashboards and ML-powered kit recommendation system",
        "details": "Create analytics dashboards for users and community, implement machine learning-based recommendation engine for kit suggestions.",
        "priority": "low",
        "status": "pending",
        "dependencies": [
          "23"
        ],
        "testStrategy": "Analytics accuracy tests, recommendation quality tests, dashboard functionality tests"
      },
      {
        "id": 26,
        "title": "Implement User Builds with Milestones Feature",
        "description": "Allow users to create build journals with step-by-step milestones, each containing images, titles, and descriptions. Include build creation form, milestone management, image uploads via Cloudinary, build viewing pages, and community build discovery on kit pages and homepage.",
        "details": "Implementation includes:\n\n1. Kit Detail Page Integration:\n   - Add \"Start a Build\" button (auth-gated)\n   - Display \"Community Builds\" section with build cards\n   - Build cards show title, user info, preview image, progress\n\n2. Build Creation Flow:\n   - /builds/new?kit=<kitslug> page with kit preview\n   - Build form with title, description, status\n   - Milestone management with add/edit functionality\n   - Image uploader with Cloudinary integration\n   - Save via BuildMilestoneUpload junction table\n\n3. Build Viewing:\n   - /builds/[id] page with build details\n   - Milestones displayed in order with image galleries\n   - Sidebar with kit info and related builds\n\n4. Discovery Features:\n   - Recent builds section on homepage\n   - Build cards with kit info and user details\n\n5. API Routes/Actions:\n   - createBuild, updateBuild, deleteBuild\n   - createMilestone, updateMilestone, deleteMilestone\n   - Upload handling via Cloudinary signature endpoint\n\nThe database schema already supports this with Build, BuildMilestone, Upload, and BuildMilestoneUpload models.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          6
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Redesign Build Edit Page with Tabbed Interface and Media Library",
        "description": "Major UI/UX overhaul of /builds/[id]/edit page implementing centralized media library, tabbed navigation, and improved build info form",
        "details": "This task involves a complete redesign of the build edit page with the following key features:\n\n1. **Build Media Library**: Centralized media management per build with drag-and-drop uploads, captions, sorting, and deletion capabilities. Images become the single source of truth (no duplicate uploads at milestone level).\n\n2. **Milestone Image Assignment**: Milestones no longer have individual upload sections. Instead, they reference images from the centralized media library with the ability to attach multiple images and order them within milestones.\n\n3. **Build Info Form**: Move build editing form to the top of the page (not hidden in modal/card) with fields for title, description (markdown editor), status, started date, and completed date. Remove \"Edit Build Info\" button from sidebar.\n\n4. **Tab Navigation**: Implement tabbed interface similar to kit pages with three tabs:\n   - Build Info: Title, description (markdown), status, dates\n   - Build Gallery: Full media library with all uploaded images, captions, sorting\n   - Build Milestones: List of milestones with attached images from media library\n\n5. **Optional Enhancements**: Featured image selection from media library and maintain right-hand \"Build Stats\" sidebar.\n\nThis requires significant refactoring of the existing BuildDetailEditView component, new media library components, tab navigation system, and updates to the milestone management system.",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          26
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Tab Navigation System and Layout Structure",
            "description": "Implement the basic tabbed interface structure for the build edit page with three tabs: Build Info, Build Gallery, and Build Milestones",
            "details": "- Create tab navigation component similar to kit pages\n- Set up basic layout structure with tab content areas\n- Implement tab state management and switching logic\n- Ensure responsive design for mobile and desktop\n- Add proper styling and active tab indicators",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 27
          },
          {
            "id": 2,
            "title": "Build Centralized Media Library Component",
            "description": "Create a comprehensive media library component with drag-and-drop uploads, image management, captions, and sorting capabilities",
            "details": "- Implement drag-and-drop file upload functionality\n- Create image grid layout with thumbnail previews\n- Add caption editing for each image\n- Implement image sorting (by upload date or manual drag-and-drop)\n- Add delete and replace functionality for images\n- Create image selection interface for milestone assignment\n- Ensure proper image optimization and loading states",
            "status": "done",
            "dependencies": [
              "27.1"
            ],
            "parentTaskId": 27
          },
          {
            "id": 3,
            "title": "Refactor Build Info Form to Always-Visible Layout",
            "description": "Move the build editing form from modal/card to always-visible form at the top of the Build Info tab",
            "details": "- Remove \"Edit Build Info\" button from sidebar\n- Create always-visible form in Build Info tab with fields:\n  - Title (text input)\n  - Description (markdown editor for rich build logs)\n  - Status (dropdown: Planning/In Progress/Completed)\n  - Started date (date picker)\n  - Completed date (date picker, only enabled if status = Completed)\n- Implement auto-save or explicit \"Save Changes\" button\n- Add form validation and error handling\n- Ensure proper form state management",
            "status": "done",
            "dependencies": [
              "27.1"
            ],
            "parentTaskId": 27
          },
          {
            "id": 4,
            "title": "Update Milestone System for Media Library Integration",
            "description": "Refactor milestone components to reference images from the centralized media library instead of individual uploads",
            "details": "- Remove individual upload sections from milestone cards\n- Create image selection interface for milestones that references media library\n- Implement ability to attach multiple images to milestones\n- Add image ordering within milestones\n- Allow images to belong to multiple milestones\n- Update milestone card display to show only selected images\n- Refactor milestone image management logic and state\n- Update database queries and actions for new image relationship model",
            "status": "done",
            "dependencies": [
              "27.2"
            ],
            "parentTaskId": 27
          },
          {
            "id": 5,
            "title": "Implement Featured Image Selection from Media Library",
            "description": "Update featured image selection to work with the centralized media library instead of milestone images",
            "details": "- Update FeaturedImageSelector component to work with media library\n- Create interface to select featured image from all uploaded images\n- Update featured image display and management logic\n- Ensure featured image updates are reflected across all views\n- Add visual indicators for which image is currently featured\n- Update database actions for featured image management",
            "status": "done",
            "dependencies": [
              "27.2"
            ],
            "parentTaskId": 27
          },
          {
            "id": 6,
            "title": "Update Sidebar and Finalize Integration",
            "description": "Update the build actions sidebar, maintain stats card, and ensure all components work together seamlessly",
            "details": "- Remove \"Edit Build Info\" button from Build Actions card\n- Update Build Stats card to reflect new media library image counts\n- Ensure sidebar maintains proper sticky positioning\n- Test and fix any integration issues between components\n- Add proper loading states and error handling\n- Ensure responsive design works across all screen sizes\n- Add comprehensive testing for the new tabbed interface\n- Update any remaining references to old milestone upload system",
            "status": "done",
            "dependencies": [
              "27.4",
              "27.5"
            ],
            "parentTaskId": 27
          }
        ]
      },
      {
        "id": 28,
        "title": "Implement UI/UX for Likes, Comments, and Sharing on Builds",
        "description": "Add social engagement features including likes, comments, and sharing functionality to build pages with comprehensive UI/UX design",
        "details": "🔹 1. Likes (Lightweight Social Feedback)\n\nPurpose: Quick, low-effort way for users to show appreciation.\n\nUI/UX\n\t•\tIcon: Heart ❤️ (outline → filled when liked).\n\t•\tPlacement: Top-right of build card or near build title.\n\t•\tCount: Display total likes next to the heart (132).\n\t•\tInteraction:\n\t•\tTap once → toggles \"like\".\n\t•\tAnimations: small \"pop\" when liking for feedback.\n\t•\tAnonymous view: Show count but require login to like.\n\t•\tHover/tooltip: \"Like this build\".\n\nExample:\n❤️ 24 likes\n\n⸻\n\n🔹 2. Comments (Community Engagement)\n\nPurpose: Encourage discussion, feedback, and connection.\n\nUI/UX\n\t•\tPlacement: Below build milestones or in a tab (\"Comments\").\n\t•\tStructure:\n\t•\tInput box:\n\t•\tPlaceholder: \"Add a comment…\"\n\t•\tSupport markdown or just plain text.\n\t•\tComment list:\n\t•\tAvatar + username\n\t•\tTimestamp (e.g. 2h ago)\n\t•\tText content\n\t•\t(Optional) \"Reply\" → threaded comments, but you could keep it flat for MVP.\n\t•\tModeration tools: User can delete their own comments. Admins can remove any.\n\t•\tSorting:\n\t•\tDefault: newest first.\n\t•\t(Optional later): most liked → top.\n\t•\tEmpty state: \"No comments yet. Be the first to comment!\"\n\n⸻\n\n🔹 3. Sharing (No DB needed)\n\nPurpose: Let users promote builds externally.\n\nUI/UX\n\t•\tButton: \"Share\" (icon: 🔗 or arrow).\n\t•\tPlacement: Top-right corner near \"Like\".\n\t•\tClick → Options:\n\t•\tCopy link → auto-copies /builds/[id] to clipboard with toast \"Link copied!\"\n\t•\tSocial buttons (small icons, optional):\n\t•\tTwitter/X\n\t•\tFacebook\n\t•\tReddit\n\t•\tDiscord (just copy-paste)\n\t•\tNo DB needed since sharing is just link-based.\n\nExample interaction:\nUser clicks Share → Copy Link → small toast in bottom corner:\n✅ \"Build link copied to clipboard!\"\n\n⸻\n\n🔹 Suggested Layout (per Build Page)\n\n```\n[ Title + Author + Dates ]\n\n[ Like ❤️ 24 ]   [ Comment 💬 5 ]   [ Share 🔗 ]\n------------------------------------------------\n| Build Milestones / Gallery / Info Tabs       |\n------------------------------------------------\nComments Section (if tab active):\n- Input box\n- Comment list\n```\n\n✨ This way:\n\t•\tLikes = quick & social.\n\t•\tComments = deeper engagement.\n\t•\tSharing = viral growth, no backend complexity.",
        "priority": "medium",
        "status": "pending",
        "dependencies": [
          26,
          27
        ],
        "testStrategy": "UI interaction tests for likes/comments/sharing, social engagement functionality tests, comment moderation tests, sharing link validation tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Database Schema for Likes and Comments",
            "description": "Add database models and relationships for build likes and comments functionality",
            "details": "Create new Prisma models for BuildLike and BuildComment:\n\n**BuildLike Model:**\n- id: String @id @default(cuid())\n- buildId: String\n- userId: String\n- createdAt: DateTime @default(now())\n- build: Build @relation(fields: [buildId], references: [id], onDelete: Cascade)\n- user: User @relation(fields: [userId], references: [id], onDelete: Cascade)\n- @@unique([buildId, userId]) // Prevent duplicate likes\n\n**BuildComment Model:**\n- id: String @id @default(cuid())\n- buildId: String\n- userId: String\n- content: String\n- createdAt: DateTime @default(now())\n- updatedAt: DateTime @updatedAt\n- build: Build @relation(fields: [buildId], references: [id], onDelete: Cascade)\n- user: User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n**Update Build Model:**\n- Add likes: BuildLike[] relation\n- Add comments: BuildComment[] relation\n\n**Update User Model:**\n- Add buildLikes: BuildLike[] relation\n- Add buildComments: BuildComment[] relation\n\nRun migration and update Prisma client.",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 28
          },
          {
            "id": 2,
            "title": "Implement Like System UI/UX",
            "description": "Create heart icon component with toggle functionality, count display, and animations",
            "details": "**LikeButton Component:**\n- Heart icon (outline → filled when liked)\n- Like count display\n- Toggle functionality (like/unlike)\n- Small \"pop\" animation on like\n- Hover tooltip: \"Like this build\"\n- Login requirement for anonymous users\n- Optimistic updates for better UX\n\n**Placement:**\n- Top-right of build card or near build title\n- Consistent positioning across all build views\n\n**API Actions:**\n- toggleBuildLike(buildId: string)\n- getBuildLikes(buildId: string)\n- getUserLikedBuilds(userId: string)\n\n**State Management:**\n- Track like status per build\n- Handle loading states\n- Error handling for failed requests",
            "status": "done",
            "dependencies": [
              "28.1"
            ],
            "parentTaskId": 28
          },
          {
            "id": 3,
            "title": "Implement Comments System UI/UX",
            "description": "Create comment input, display list, and moderation features",
            "details": "**CommentInput Component:**\n- Textarea with placeholder: \"Add a comment…\"\n- Markdown support or plain text\n- Submit button with loading state\n- Character limit validation\n- Auto-resize textarea\n\n**CommentList Component:**\n- Display comments with avatar + username\n- Timestamp (e.g. \"2h ago\")\n- Comment content with markdown rendering\n- Delete button for own comments\n- Admin moderation tools\n- Empty state: \"No comments yet. Be the first to comment!\"\n\n**CommentItem Component:**\n- User avatar and username\n- Comment timestamp\n- Comment content\n- Delete/edit actions (if owner)\n- Reply functionality (optional for MVP)\n\n**Placement:**\n- Below build milestones or in \"Comments\" tab\n- Sort by newest first (default)\n\n**API Actions:**\n- createBuildComment(buildId: string, content: string)\n- getBuildComments(buildId: string)\n- deleteBuildComment(commentId: string)\n- updateBuildComment(commentId: string, content: string)",
            "status": "done",
            "dependencies": [
              "28.1"
            ],
            "parentTaskId": 28
          },
          {
            "id": 4,
            "title": "Implement Sharing System",
            "description": "Create share button with copy link and social media options",
            "details": "**ShareButton Component:**\n- Share icon (🔗 or arrow)\n- Click opens share options modal/dropdown\n- Copy link functionality\n- Social media buttons (Twitter/X, Facebook, Reddit, Discord)\n- Toast notification: \"Link copied to clipboard!\"\n\n**ShareOptions Component:**\n- Copy link button (primary action)\n- Social media share buttons (small icons)\n- Build URL: /builds/[id]\n- Open Graph meta tags for social sharing\n\n**Placement:**\n- Top-right corner near Like button\n- Consistent across all build views\n\n**Features:**\n- No database needed (link-based sharing)\n- Clipboard API integration\n- Social media URL generation\n- Responsive design for mobile\n\n**API Actions:**\n- generateShareUrl(buildId: string)\n- getBuildShareData(buildId: string) // For Open Graph",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 28
          },
          {
            "id": 5,
            "title": "Integrate Social Features into Build Pages",
            "description": "Add social engagement components to build detail and edit pages",
            "details": "**Build Detail Page Integration:**\n- Add Like, Comment, Share buttons to build header\n- Implement suggested layout:\n  ```\n  [ Title + Author + Dates ]\n  [ Like ❤️ 24 ] [ Comment 💬 5 ] [ Share 🔗 ]\n  ```\n- Add Comments tab to existing tab navigation\n- Integrate with existing build milestone system\n\n**Build Edit Page Integration:**\n- Add social engagement preview\n- Show like/comment counts in edit mode\n- Maintain existing tab structure\n\n**Build Card Integration:**\n- Add like count to build cards in listings\n- Consistent social engagement display\n- Hover states and interactions\n\n**Responsive Design:**\n- Mobile-friendly button layout\n- Touch-friendly interaction areas\n- Proper spacing and alignment\n\n**State Management:**\n- Real-time updates for likes/comments\n- Optimistic UI updates\n- Error handling and retry logic",
            "status": "pending",
            "dependencies": [
              "28.2",
              "28.3",
              "28.4"
            ],
            "parentTaskId": 28
          },
          {
            "id": 6,
            "title": "Add Polish, Animations, and Testing",
            "description": "Implement smooth animations, loading states, and comprehensive testing",
            "details": "**Animations and Polish:**\n- Heart \"pop\" animation on like\n- Smooth transitions for comment loading\n- Loading skeletons for social engagement\n- Hover effects and micro-interactions\n- Toast notifications with smooth animations\n- Error state handling with retry options\n\n**Performance Optimizations:**\n- Lazy loading for comment lists\n- Debounced like/unlike actions\n- Optimistic updates for better perceived performance\n- Caching for like/comment counts\n\n**Testing:**\n- Unit tests for LikeButton, CommentInput, CommentList components\n- Integration tests for social engagement flow\n- E2E tests for complete user journey\n- Accessibility tests (keyboard navigation, screen readers)\n- Performance tests for large comment lists\n- Mobile responsiveness tests\n\n**Error Handling:**\n- Network error recovery\n- Rate limiting handling\n- User permission validation\n- Graceful degradation for failed features\n\n**Documentation:**\n- Component usage examples\n- API documentation updates\n- User interaction guidelines",
            "status": "pending",
            "dependencies": [
              "28.5"
            ],
            "parentTaskId": 28
          }
        ]
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "createdAt": "2025-01-12T00:00:00.000Z",
      "updatedAt": "2025-01-12T00:00:00.000Z",
      "totalTasks": 28,
      "tags": {
        "master": {
          "name": "master",
          "description": "Main development branch tasks",
          "createdAt": "2025-01-12T00:00:00.000Z"
        }
      },
      "activeTag": "master",
      "created": "2025-09-12T02:12:27.022Z",
      "description": "Tasks for master context",
      "updated": "2025-09-17T23:51:00.644Z"
    }
  }
}