// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Timeline represents the fictional universe timelines (Universal Century, After Colony, etc.)
model Timeline {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  series Series[]

  @@map("timelines")
}

// Series represents anime/manga series (Mobile Suit Gundam, Zeta Gundam, etc.)
model Series {
  id            String   @id @default(cuid())
  name          String   @unique
  slug          String?  @unique
  description   String?
  timelineId    String?
  scrapedImages String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  timeline    Timeline?    @relation(fields: [timelineId], references: [id], onDelete: SetNull)
  mobileSuits MobileSuit[]
  kits        Kit[]

  @@map("series")
}

// MobileSuit represents the mecha/robot designs (RX-78-2 Gundam, Zaku II, etc.)
model MobileSuit {
  id            String   @id @default(cuid())
  name          String   @unique
  slug          String?  @unique
  description   String?
  seriesId      String?
  scrapedImages String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  series  Series?            @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  kits    KitMobileSuit[]
  uploads MobileSuitUpload[]

  @@map("mobile_suits")
}

// Grade represents the classification system (HG, RG, MG, PG, etc.)
model Grade {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productLines ProductLine[]

  @@map("grades")
}

// ProductLine represents specific product lines within grades (HGUC, MGEX, PG Unleashed, etc.)
model ProductLine {
  id           String   @id @default(cuid())
  name         String   @unique
  slug         String?  @unique
  description  String?
  gradeId      String
  logoId       String?
  scrapedImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  grade Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  logo  Upload? @relation(fields: [logoId], references: [id], onDelete: SetNull)
  kits  Kit[]

  @@map("product_lines")
}

// ReleaseType represents how a kit is released (Retail, P-Bandai, Gundam Base, etc.)
model ReleaseType {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  kits Kit[]

  @@map("release_types")
}

// Kit represents the main entity - individual Gunpla kits
model Kit {
  id               String    @id @default(cuid())
  name             String
  slug             String?   @unique
  number           String
  variant          String?
  releaseDate      DateTime?
  priceYen         Int?
  region           String?
  boxArt           String? // Cloudinary URL
  notes            String?
  manualLinks      String[]  @default([])
  scrapedImages    String[]  @default([])
  potentialBaseKit String? // Potential base kit reference
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Foreign keys
  productLineId String?
  seriesId      String?
  releaseTypeId String?
  baseKitId     String?

  // Relations
  productLine ProductLine?         @relation(fields: [productLineId], references: [id], onDelete: SetNull)
  series      Series?              @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  releaseType ReleaseType?         @relation(fields: [releaseTypeId], references: [id], onDelete: SetNull)
  baseKit     Kit?                 @relation("KitVariants", fields: [baseKitId], references: [id], onDelete: SetNull)
  variants    Kit[]                @relation("KitVariants")
  mobileSuits KitMobileSuit[]
  uploads     KitUpload[]
  collections UserKitCollection[]
  reviews     Review[]
  builds      Build[]
  listings    MarketplaceListing[]

  @@map("kits")
}

// Junction table for many-to-many relationship between Kit and MobileSuit
model KitMobileSuit {
  id           String   @id @default(cuid())
  kitId        String
  mobileSuitId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  kit        Kit        @relation(fields: [kitId], references: [id], onDelete: Cascade)
  mobileSuit MobileSuit @relation(fields: [mobileSuitId], references: [id], onDelete: Cascade)

  @@unique([kitId, mobileSuitId])
  @@map("kit_mobile_suits")
}

// Upload represents files uploaded to Cloudinary
model Upload {
  id                String   @id @default(cuid())
  cloudinaryAssetId String   @unique
  publicId          String
  url               String
  eagerUrl          String?
  format            String
  resourceType      String
  size              Int
  pages             Int?
  originalFilename  String
  uploadedAt        DateTime
  uploadedById      String // FK to User who uploaded the file
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  uploadedBy            User                   @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)
  kitUploads            KitUpload[]
  mobileSuitUploads     MobileSuitUpload[]
  productLineLogos      ProductLine[]
  buildMilestoneUploads BuildMilestoneUpload[]
  buildFeaturedImages   Build[]                @relation("BuildFeaturedImage")

  @@map("uploads")
}

// KitImageType enum for categorizing kit images
enum KitImageType {
  BOX_ART
  PRODUCT_SHOTS
  RUNNERS
  MANUAL
  PROTOTYPE
}

// Junction table for many-to-many relationship between Kit and Upload
model KitUpload {
  id        String       @id @default(cuid())
  kitId     String
  uploadId  String
  caption   String?
  order     Int?
  type      KitImageType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  kit    Kit    @relation(fields: [kitId], references: [id], onDelete: Cascade)
  upload Upload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([kitId, uploadId])
  @@map("kit_uploads")
}

// Junction table for many-to-many relationship between MobileSuit and Upload
model MobileSuitUpload {
  id           String   @id @default(cuid())
  mobileSuitId String
  uploadId     String
  caption      String?
  order        Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  mobileSuit MobileSuit @relation(fields: [mobileSuitId], references: [id], onDelete: Cascade)
  upload     Upload     @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([mobileSuitId, uploadId])
  @@map("mobile_suit_uploads")
}

// Junction table for many-to-many relationship between BuildMilestone and Upload
model BuildMilestoneUpload {
  id               String   @id @default(cuid())
  buildMilestoneId String
  uploadId         String
  caption          String?
  order            Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  buildMilestone BuildMilestone @relation(fields: [buildMilestoneId], references: [id], onDelete: Cascade)
  upload         Upload         @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([buildMilestoneId, uploadId])
  @@map("build_milestone_uploads")
}

// User model for Clerk integration
model User {
  id        String   @id // Clerk user ID
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  avatarUrl String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gunpla Sekai specific fields
  bio                String? // User bio/description
  instagramUrl       String? // Instagram profile URL
  twitterUrl         String? // Twitter/X profile URL
  youtubeUrl         String? // YouTube channel URL
  portfolioUrl       String? // Personal portfolio/hobby site
  bannerImageUrl     String? // Profile banner image
  themeColor         String? // Profile theme color (hex)
  isPublic           Boolean @default(true) // Profile visibility
  showCollections    Boolean @default(true) // Show collections publicly
  showBuilds         Boolean @default(true) // Show builds publicly
  showActivity       Boolean @default(true) // Show activity feed publicly
  showBadges         Boolean @default(true) // Show badges publicly
  emailNotifications Boolean @default(true) // Email notification preferences

  // Relations
  collections   UserKitCollection[]
  builds        Build[]
  reviews       Review[]
  store         UserStore?
  uploads       Upload[]            @relation("UploadedBy")
  buildComments BuildComment[]

  @@map("users")
}

// Collection status enum
enum CollectionStatus {
  WISHLIST
  PREORDER
  BACKLOG
  IN_PROGRESS
  BUILT
}

// User kit collections (wishlist, backlog, built)
model UserKitCollection {
  id        String           @id @default(cuid())
  userId    String
  kitId     String
  status    CollectionStatus
  notes     String?
  addedAt   DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@unique([userId, kitId])
  @@index([userId])
  @@index([kitId])
  @@index([status])
  @@index([userId, status])
  @@map("user_kit_collections")
}

// Review categories enum
enum ReviewCategory {
  BUILD_QUALITY_ENGINEERING
  ARTICULATION_POSEABILITY
  DETAIL_ACCURACY
  AESTHETICS_PROPORTIONS
  ACCESSORIES_GIMMICKS
  VALUE_EXPERIENCE
}

// Main review model
model Review {
  id           String   @id @default(cuid())
  userId       String
  kitId        String
  title        String?
  content      String?
  overallScore Float // Auto-calculated average of category scores (not user input)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit            Kit           @relation(fields: [kitId], references: [id], onDelete: Cascade)
  categoryScores ReviewScore[]

  @@unique([userId, kitId]) // One review per user per kit
  @@index([kitId])
  @@index([userId])
  @@index([overallScore])
  @@index([createdAt])
  @@map("reviews")
}

// Individual category scores
model ReviewScore {
  id       String         @id @default(cuid())
  reviewId String
  category ReviewCategory
  score    Int // 1-10 scale
  notes    String?

  // Relations
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, category])
  @@map("review_scores")
}

// Build status enum
enum BuildStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

// Main build model
model Build {
  id              String      @id @default(cuid())
  userId          String
  kitId           String
  title           String
  description     String?
  status          BuildStatus @default(PLANNING)
  startedAt       DateTime?
  completedAt     DateTime?
  featuredImageId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit           Kit              @relation(fields: [kitId], references: [id], onDelete: Cascade)
  featuredImage Upload?          @relation("BuildFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  milestones    BuildMilestone[]
  comments      BuildComment[]

  @@index([userId])
  @@index([kitId])
  @@index([status])
  @@index([createdAt])
  @@map("builds")
}

// Build milestone types
enum MilestoneType {
  ACQUISITION
  PLANNING
  BUILD
  PAINTING
  PANEL_LINING
  DECALS
  TOPCOAT
  PHOTOGRAPHY
  COMPLETION
}

// Build milestones for progress tracking
model BuildMilestone {
  id          String        @id @default(cuid())
  buildId     String
  type        MilestoneType
  title       String
  description String?
  imageUrls   String[]      @default([])
  completedAt DateTime?
  order       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  build   Build                  @relation(fields: [buildId], references: [id], onDelete: Cascade)
  uploads BuildMilestoneUpload[]

  @@map("build_milestones")
}

// Build comments for community engagement
model BuildComment {
  id        String   @id @default(cuid())
  buildId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  build Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("build_comments")
}

// User store model
model UserStore {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings MarketplaceListing[]

  @@map("user_stores")
}

// Marketplace listings
model MarketplaceListing {
  id          String   @id @default(cuid())
  storeId     String
  kitId       String
  title       String
  description String?
  price       Int // Price in cents
  currency    String   @default("JPY")
  imageUrls   String[] @default([])
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store UserStore @relation(fields: [storeId], references: [id], onDelete: Cascade)
  kit   Kit       @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([kitId])
  @@index([available])
  @@index([price])
  @@index([createdAt])
  @@map("marketplace_listings")
}
